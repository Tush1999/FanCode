{"ast":null,"code":"var _jsxFileName = \"/Users/vinsol/Downloads/Movie App/src/components/movies-list.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport MovieCard from \"./card\";\nimport { fetchMovieList } from \"../apis/movies\";\nimport SidebarFilters from \"./sidebar-filters\";\nimport useInfiniteScroll from \"../hooks/infinite-scroll\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MoviesList = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [list, setList] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [year, setYear] = useState(2012);\n  const [activeGenresIds, setActiveGenresIds] = useState([]);\n  const containerRef = useRef();\n  const fetchMovies = (movieYear = year, page = 1) => {\n    const genresId = id || activeGenresIds.join(\",\");\n    fetchMovieList({\n      movieYear,\n      genresId\n    }).then(response => {\n      const {\n        page,\n        total_pages: totalPages,\n        results\n      } = (response === null || response === void 0 ? void 0 : response.data) || {};\n      if (!(results !== null && results !== void 0 && results.length) && page < totalPages) {\n        fetchMovies(undefined, page + 1);\n      }\n      setYear(movieYear + 1);\n      setList(data => ({\n        ...data,\n        [movieYear]: results\n      }));\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n  const inifiniteFetchMovies = () => {\n    const currentYear = new Date().getFullYear();\n    if (year <= currentYear) {\n      fetchMovies();\n    }\n  };\n  useInfiniteScroll({\n    containerRef,\n    successFunc: inifiniteFetchMovies\n  });\n  useEffect(() => {\n    if (id) {\n      setList([]);\n      setYear(2012);\n    }\n    fetchMovies(2012);\n  }, [id, activeGenresIds]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"...Data is loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [id && /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => navigate(\"/\"),\n      className: \"back\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list-wrapper\",\n      ref: containerRef,\n      children: [!id && /*#__PURE__*/_jsxDEV(SidebarFilters, {\n        activeGenresIds: activeGenresIds,\n        setActiveGenresIds: setActiveGenresIds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-container\",\n        children: Object.entries(list).map(([key, values]) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-year\",\n              children: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movie-list-container\",\n              children: values !== null && values !== void 0 && values.length ? values.map(data => /*#__PURE__*/_jsxDEV(MovieCard, {\n                ...data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 42\n              }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"no-movie\",\n                children: \"No movies under this filter\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MoviesList, \"Kz8YETKItioREf97bjZdz9xdscE=\", false, function () {\n  return [useNavigate, useParams, useInfiniteScroll];\n});\n_c = MoviesList;\nexport default MoviesList;\nvar _c;\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"names":["useState","useEffect","useRef","useNavigate","useParams","MovieCard","fetchMovieList","SidebarFilters","useInfiniteScroll","jsxDEV","_jsxDEV","Fragment","_Fragment","MoviesList","_s","navigate","id","list","setList","isLoading","setIsLoading","year","setYear","activeGenresIds","setActiveGenresIds","containerRef","fetchMovies","movieYear","page","genresId","join","then","response","total_pages","totalPages","results","data","length","undefined","finally","inifiniteFetchMovies","currentYear","Date","getFullYear","successFunc","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","ref","Object","entries","map","key","values","_c","$RefreshReg$"],"sources":["/Users/vinsol/Downloads/Movie App/src/components/movies-list.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\n\nimport MovieCard from \"./card\";\n\nimport { fetchMovieList } from \"../apis/movies\";\n\nimport SidebarFilters from \"./sidebar-filters\";\nimport useInfiniteScroll from \"../hooks/infinite-scroll\";\n\nconst MoviesList = () => {\n  const navigate = useNavigate();\n\n  const { id } = useParams();\n\n  const [list, setList] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [year, setYear] = useState(2012);\n  const [activeGenresIds, setActiveGenresIds] = useState([]);\n\n  const containerRef = useRef();\n\n  const fetchMovies = (movieYear = year, page = 1) => {\n    const genresId = id || activeGenresIds.join(\",\");\n\n    fetchMovieList({ movieYear, genresId })\n      .then((response) => {\n        const { page, total_pages: totalPages, results } = response?.data || {};\n\n        if (!results?.length && page < totalPages) {\n          fetchMovies(undefined, page + 1);\n        }\n        \n        setYear(movieYear + 1);\n        setList((data) => ({ ...data, [movieYear]: results }));\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const inifiniteFetchMovies = () => {\n    const currentYear = new Date().getFullYear();\n\n    if (year <= currentYear) {\n      fetchMovies();\n    }\n  };\n\n  useInfiniteScroll({ containerRef, successFunc: inifiniteFetchMovies });\n\n  useEffect(() => {\n    if (id) {\n      setList([]);\n      setYear(2012);\n    }\n    fetchMovies(2012);\n  }, [id, activeGenresIds]);\n\n  if (isLoading) {\n    return <div>...Data is loading</div>;\n  }\n\n  return (\n    <>\n      {id && (\n        <div onClick={() => navigate(\"/\")} className=\"back\">\n          Back\n        </div>\n      )}\n      <div className=\"movie-list-wrapper\" ref={containerRef}>\n        {!id && (\n          <SidebarFilters\n            activeGenresIds={activeGenresIds}\n            setActiveGenresIds={setActiveGenresIds}\n          />\n        )}\n        <div className=\"right-container\">\n          {Object.entries(list).map(([key, values]) => {\n            return (\n              <div className=\"list-container\">\n                <div className=\"selected-year\">{key}</div>\n                <div className=\"movie-list-container\">\n                  {values?.length ? (\n                    values.map((data) => <MovieCard {...data} />)\n                  ) : (\n                    <div className=\"no-movie\">No movies under this filter</div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MoviesList;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,WAAW,EAAEC,SAAS,QAAQ,cAAc;AAErD,OAAOC,SAAS,MAAM,QAAQ;AAE9B,SAASC,cAAc,QAAQ,gBAAgB;AAE/C,OAAOC,cAAc,MAAM,mBAAmB;AAC9C,OAAOC,iBAAiB,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9B,MAAM;IAAEa;EAAG,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAE1B,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACqB,IAAI,EAAEC,OAAO,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACuB,eAAe,EAAEC,kBAAkB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMyB,YAAY,GAAGvB,MAAM,CAAC,CAAC;EAE7B,MAAMwB,WAAW,GAAGA,CAACC,SAAS,GAAGN,IAAI,EAAEO,IAAI,GAAG,CAAC,KAAK;IAClD,MAAMC,QAAQ,GAAGb,EAAE,IAAIO,eAAe,CAACO,IAAI,CAAC,GAAG,CAAC;IAEhDxB,cAAc,CAAC;MAAEqB,SAAS;MAAEE;IAAS,CAAC,CAAC,CACpCE,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAM;QAAEJ,IAAI;QAAEK,WAAW,EAAEC,UAAU;QAAEC;MAAQ,CAAC,GAAG,CAAAH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,IAAI,KAAI,CAAC,CAAC;MAEvE,IAAI,EAACD,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEE,MAAM,KAAIT,IAAI,GAAGM,UAAU,EAAE;QACzCR,WAAW,CAACY,SAAS,EAAEV,IAAI,GAAG,CAAC,CAAC;MAClC;MAEAN,OAAO,CAACK,SAAS,GAAG,CAAC,CAAC;MACtBT,OAAO,CAAEkB,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE,CAACT,SAAS,GAAGQ;MAAQ,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CACDI,OAAO,CAAC,MAAM;MACbnB,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACN,CAAC;EAED,MAAMoB,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAE5C,IAAItB,IAAI,IAAIoB,WAAW,EAAE;MACvBf,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAEDlB,iBAAiB,CAAC;IAAEiB,YAAY;IAAEmB,WAAW,EAAEJ;EAAqB,CAAC,CAAC;EAEtEvC,SAAS,CAAC,MAAM;IACd,IAAIe,EAAE,EAAE;MACNE,OAAO,CAAC,EAAE,CAAC;MACXI,OAAO,CAAC,IAAI,CAAC;IACf;IACAI,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC,EAAE,CAACV,EAAE,EAAEO,eAAe,CAAC,CAAC;EAEzB,IAAIJ,SAAS,EAAE;IACb,oBAAOT,OAAA;MAAAmC,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtC;EAEA,oBACEvC,OAAA,CAAAE,SAAA;IAAAiC,QAAA,GACG7B,EAAE,iBACDN,OAAA;MAAKwC,OAAO,EAAEA,CAAA,KAAMnC,QAAQ,CAAC,GAAG,CAAE;MAACoC,SAAS,EAAC,MAAM;MAAAN,QAAA,EAAC;IAEpD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN,eACDvC,OAAA;MAAKyC,SAAS,EAAC,oBAAoB;MAACC,GAAG,EAAE3B,YAAa;MAAAoB,QAAA,GACnD,CAAC7B,EAAE,iBACFN,OAAA,CAACH,cAAc;QACbgB,eAAe,EAAEA,eAAgB;QACjCC,kBAAkB,EAAEA;MAAmB;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CACF,eACDvC,OAAA;QAAKyC,SAAS,EAAC,iBAAiB;QAAAN,QAAA,EAC7BQ,MAAM,CAACC,OAAO,CAACrC,IAAI,CAAC,CAACsC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,MAAM,CAAC,KAAK;UAC3C,oBACE/C,OAAA;YAAKyC,SAAS,EAAC,gBAAgB;YAAAN,QAAA,gBAC7BnC,OAAA;cAAKyC,SAAS,EAAC,eAAe;cAAAN,QAAA,EAAEW;YAAG;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC1CvC,OAAA;cAAKyC,SAAS,EAAC,sBAAsB;cAAAN,QAAA,EAClCY,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEpB,MAAM,GACboB,MAAM,CAACF,GAAG,CAAEnB,IAAI,iBAAK1B,OAAA,CAACL,SAAS;gBAAA,GAAK+B;cAAI;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,CAAC,gBAE7CvC,OAAA;gBAAKyC,SAAS,EAAC,UAAU;gBAAAN,QAAA,EAAC;cAA2B;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK;YAC3D;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAEV,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAACnC,EAAA,CAtFID,UAAU;EAAA,QACGV,WAAW,EAEbC,SAAS,EAoCxBI,iBAAiB;AAAA;AAAAkD,EAAA,GAvCb7C,UAAU;AAwFhB,eAAeA,UAAU;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}