{"ast":null,"code":"var _jsxFileName = \"/Users/vinsol/Desktop/Movie Web App/src/components/movies-list.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\nimport MovieCard from \"./card\";\nimport { fetchMovieList } from \"../apis/movies\";\nimport SidebarFilters from \"./sidebar-filters\";\nimport useInfiniteScroll from \"../hooks/infinite-scroll\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MoviesList = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [list, setList] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [year, setYear] = useState(2012);\n  const [activeGenresIds, setActiveGenresIds] = useState([]);\n  const fetchMovies = (movieYear = year) => {\n    const genresId = id || activeGenresIds.join(\",\");\n    fetchMovieList({\n      movieYear,\n      genresId\n    }).then(response => {\n      const {\n        results\n      } = (response === null || response === void 0 ? void 0 : response.data) || {};\n      setYear(movieYear + 1);\n      setList(data => ({\n        ...data,\n        [movieYear]: results\n      }));\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n  const inifiniteFetchMovies = () => {\n    const currentYear = new Date().getFullYear();\n    if (year <= currentYear) {\n      fetchMovies();\n    }\n  };\n  useInfiniteScroll({\n    successFunc: inifiniteFetchMovies\n  });\n  useEffect(() => {\n    if (id) {\n      setList([]);\n      setYear(2012);\n    }\n    fetchMovies(2012);\n  }, [id, activeGenresIds]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"...Data is loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [id && /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => navigate(\"/\"),\n      className: \"back\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-list-wrapper\",\n      children: [!id && /*#__PURE__*/_jsxDEV(SidebarFilters, {\n        activeGenresIds: activeGenresIds,\n        setActiveGenresIds: setActiveGenresIds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-container\",\n        children: Object.entries(list).map(([key, values]) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-year\",\n              children: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movie-list-container\",\n              children: values !== null && values !== void 0 && values.length ? values.map(data => /*#__PURE__*/_jsxDEV(MovieCard, {\n                ...data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 42\n              }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"no-movie\",\n                children: \"No movies under this filter\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MoviesList, \"PWUJSz/yp5Wmk4n8pOvm0+VkcWQ=\", false, function () {\n  return [useNavigate, useParams, useInfiniteScroll];\n});\n_c = MoviesList;\nexport default MoviesList;\nvar _c;\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"names":["useState","useEffect","useNavigate","useParams","MovieCard","fetchMovieList","SidebarFilters","useInfiniteScroll","jsxDEV","_jsxDEV","Fragment","_Fragment","MoviesList","_s","navigate","id","list","setList","isLoading","setIsLoading","year","setYear","activeGenresIds","setActiveGenresIds","fetchMovies","movieYear","genresId","join","then","response","results","data","finally","inifiniteFetchMovies","currentYear","Date","getFullYear","successFunc","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","Object","entries","map","key","values","length","_c","$RefreshReg$"],"sources":["/Users/vinsol/Desktop/Movie Web App/src/components/movies-list.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\n\nimport MovieCard from \"./card\";\n\nimport { fetchMovieList } from \"../apis/movies\";\n\nimport SidebarFilters from \"./sidebar-filters\";\nimport useInfiniteScroll from \"../hooks/infinite-scroll\";\n\ntype MovieResponse = {\n  title: string;\n  poster_path: string;\n  popularity: number;\n  adult: boolean,\n  genre_ids: number[],\n  original_title: string,\n  overview: string,\n};\n\ntype ListType = Record<number, MovieResponse[]>\n\ntype Genre = string[];\n\nconst MoviesList = () => {\n  const navigate = useNavigate();\n\n  const { id } = useParams();\n\n  const [list, setList] = useState<ListType>({} as ListType);\n  const [isLoading, setIsLoading] = useState(false);\n  const [year, setYear] = useState(2012);\n  const [activeGenresIds, setActiveGenresIds] = useState<Genre>([]);\n\n  const fetchMovies = (movieYear = year) => {\n    const genresId = id || activeGenresIds.join(\",\");\n\n    fetchMovieList({ movieYear, genresId })\n      .then((response) => {\n        const { results } = response?.data || {};\n\n        setYear(movieYear + 1);\n        setList((data) => ({ ...data, [movieYear]: results }));\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const inifiniteFetchMovies = () => {\n    const currentYear = new Date().getFullYear();\n\n    if (year <= currentYear) {\n      fetchMovies();\n    }\n  };\n\n  useInfiniteScroll({ successFunc: inifiniteFetchMovies });\n\n  useEffect(() => {\n    if (id) {\n      setList([]);\n      setYear(2012);\n    }\n    fetchMovies(2012);\n  }, [id, activeGenresIds]);\n\n  if (isLoading) {\n    return <div>...Data is loading</div>;\n  }\n\n  return (\n    <>\n      {id && (\n        <div onClick={() => navigate(\"/\")} className=\"back\">\n          Back\n        </div>\n      )}\n      <div className=\"movie-list-wrapper\">\n        {!id && (\n          <SidebarFilters\n            activeGenresIds={activeGenresIds}\n            setActiveGenresIds={setActiveGenresIds}\n          />\n        )}\n        <div className=\"right-container\">\n          {Object.entries(list).map(([key, values]) => {\n            return (\n              <div className=\"list-container\">\n                <div className=\"selected-year\">{key}</div>\n                <div className=\"movie-list-container\">\n                  {values?.length ? (\n                    values.map((data) => <MovieCard {...data} />)\n                  ) : (\n                    <div className=\"no-movie\">No movies under this filter</div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MoviesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}