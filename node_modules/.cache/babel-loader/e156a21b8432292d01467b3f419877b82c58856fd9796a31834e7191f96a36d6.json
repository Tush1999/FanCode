{"ast":null,"code":"var _jsxFileName = \"/Users/vinsol/Desktop/Movie Web App/src/components/sidebar-filters.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchAllGenres } from \"../apis/movies\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SidebarFilters = ({\n  activeGenresIds,\n  setActiveGenresIds\n}) => {\n  _s();\n  const [genresList, setGeneresList] = useState([]);\n  useEffect(() => {\n    fetchAllGenres().then(res => {\n      var _res$data;\n      const genres = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.genres;\n      setGeneresList(genres);\n    });\n  }, []);\n  const handleChange = evt => {\n    const {\n      value,\n      checked\n    } = evt.target;\n    let activeIds = checked ? activeGenresIds.concat(value) : activeGenresIds.filter(ids => ids != value);\n    setActiveGenresIds(activeIds);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filter-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Filters By:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), genresList.map(({\n      id,\n      name\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: id,\n        name: name,\n        value: id,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: id,\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(SidebarFilters, \"VR3tRIShT/yp6qfeseMxykzKF6w=\");\n_c = SidebarFilters;\nexport default SidebarFilters;\nvar _c;\n$RefreshReg$(_c, \"SidebarFilters\");","map":{"version":3,"names":["React","useState","useEffect","fetchAllGenres","jsxDEV","_jsxDEV","SidebarFilters","activeGenresIds","setActiveGenresIds","_s","genresList","setGeneresList","then","res","_res$data","genres","data","handleChange","evt","value","checked","target","activeIds","concat","filter","ids","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","id","name","type","onChange","htmlFor","_c","$RefreshReg$"],"sources":["/Users/vinsol/Desktop/Movie Web App/src/components/sidebar-filters.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { fetchAllGenres } from \"../apis/movies\";\n\ninterface FilterProps {\n  activeGenresIds: (string)[];\n  setActiveGenresIds: React.Dispatch<React.SetStateAction<string[]>>\n}\n\nconst SidebarFilters = ({ activeGenresIds, setActiveGenresIds }: FilterProps) => {\n  const [genresList, setGeneresList] = useState([]);\n\n  useEffect(() => {\n    fetchAllGenres().then((res) => {\n      const genres = res?.data?.genres;\n      setGeneresList(genres);\n    });\n  }, []);\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = evt.target;\n\n    let activeIds = checked\n      ? activeGenresIds.concat(value)\n      : activeGenresIds.filter((ids) => ids != value);\n\n    setActiveGenresIds(activeIds);\n  };\n\n  return (\n    <div className=\"filter-container\">\n      <div>Filters By:</div>\n      {genresList.map(({ id, name }) => (\n        <div className=\"filters\">\n          <input\n            type=\"checkbox\"\n            id={id}\n            name={name}\n            value={id}\n            onChange={handleChange}\n          />\n          <label htmlFor={id}>{name}</label>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SidebarFilters;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,cAAc,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOhD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,eAAe;EAAEC;AAAgC,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAM,CAACC,UAAU,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACdC,cAAc,CAAC,CAAC,CAACS,IAAI,CAAEC,GAAG,IAAK;MAAA,IAAAC,SAAA;MAC7B,MAAMC,MAAM,GAAGF,GAAG,aAAHA,GAAG,wBAAAC,SAAA,GAAHD,GAAG,CAAEG,IAAI,cAAAF,SAAA,uBAATA,SAAA,CAAWC,MAAM;MAChCJ,cAAc,CAACI,MAAM,CAAC;IACxB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAIC,GAAwC,IAAK;IACjE,MAAM;MAAEC,KAAK;MAAEC;IAAQ,CAAC,GAAGF,GAAG,CAACG,MAAM;IAErC,IAAIC,SAAS,GAAGF,OAAO,GACnBb,eAAe,CAACgB,MAAM,CAACJ,KAAK,CAAC,GAC7BZ,eAAe,CAACiB,MAAM,CAAEC,GAAG,IAAKA,GAAG,IAAIN,KAAK,CAAC;IAEjDX,kBAAkB,CAACc,SAAS,CAAC;EAC/B,CAAC;EAED,oBACEjB,OAAA;IAAKqB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BtB,OAAA;MAAAsB,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACrBrB,UAAU,CAACsB,GAAG,CAAC,CAAC;MAAEC,EAAE;MAAEC;IAAK,CAAC,kBAC3B7B,OAAA;MAAKqB,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBtB,OAAA;QACE8B,IAAI,EAAC,UAAU;QACfF,EAAE,EAAEA,EAAG;QACPC,IAAI,EAAEA,IAAK;QACXf,KAAK,EAAEc,EAAG;QACVG,QAAQ,EAAEnB;MAAa;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACF1B,OAAA;QAAOgC,OAAO,EAAEJ,EAAG;QAAAN,QAAA,EAAEO;MAAI;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CArCIH,cAAc;AAAAgC,EAAA,GAAdhC,cAAc;AAuCpB,eAAeA,cAAc;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}